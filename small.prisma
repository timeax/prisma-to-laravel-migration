datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ModelStatus {
  active
  inactive
  disabled
}

model User {
  id                BigInt       @id @default(autoincrement())
  name              String
  email             String       @unique
  email_verified_at DateTime?
  status            ModelStatus  @default(inactive)
  emails            EmailOwner[]

  // relations
  accounts Account[]

  @@map("users")
}

/// Email ownership enforces: an email belongs to exactly one user.
/// Multiple accounts under the same user can reuse that email freely.
model EmailOwner {
  id      BigInt @id @default(autoincrement())
  email   String ///@fillable
  user_id BigInt ///@fillable

  user     User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  accounts Account[] @relation("email_ownership")

  @@unique([email]) // keeps global uniqueness
  @@unique([email, user_id]) // enables composite FK from Account
  @@map("email_owners")
}

enum AccountType {
  user
  admin
}

/// @extend:Illuminate\Foundation\Auth\User
/// @trait:App\Lib\Notifications\Concerns\Notifiable
/// @trait:App\Traits\HasTeamRolesAndPermissions
/// @trait:App\Traits\FileAccessChecks
/// @trait:App\Traits\HasRouteAccess
/// @trait:App\Traits\DetectsGuard
/// @trait:Laravel\Sanctum\HasApiTokens
/// @appemds:{e_mail, alias}
/// @guarded
model Account {
  id BigInt @id @default(autoincrement())

  name           String? /// @fillable
  email          String /// @fillable  // now doubles as the FK to EmailOwner.email
  user_id        BigInt
  type           AccountType /// @fillable
  password       String /// @hidden
  remember_token String? /// @hidden

  // 2-factor
  twofa_secret     String? /// @hidden
  twofa_enabled_at DateTime? /// @fillable

  // localisation / prefs
  lang_id     BigInt? /// @fillable
  currency_id BigInt? /// @fillable
  country_id  BigInt? /// @fillable
  state_id    BigInt? /// @fillable

  status ModelStatus @default(inactive) /// @fillable

  // finance
  balance Decimal? @db.Decimal(12, 2) /// @fillable

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // â”€ relations
  user  User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  // Email ownership: Account.email -> EmailOwner.email (unique)
  owner EmailOwner? @relation("email_ownership", fields: [email, user_id], references: [email, user_id], onDelete: Restrict)

  @@unique([user_id, type]) // keep: one account per type per user
  @@index([user_id, email]) // keep: fast guard-scoped lookups
  @@index([type])
  @@map("accounts")
}

model User2 {
  id    Int        @id @default(autoincrement())
  roles UserRole[]
}

model Role {
  id    Int        @id @default(autoincrement())
  users UserRole[]
}

model UserRole {
  id    Int        @id @default(autoincrement())
  userId Int
  roleId Int

  user User2 @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])
  @@map("user_roles")
}
