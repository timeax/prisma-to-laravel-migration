// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator migrations {
  provider          = "prisma-laravel-migrations"
  overwriteExisting = true
}

generator models {
  provider          = "prisma-laravel-models"
  overwriteExisting = true
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
// ─── ENUMS ─────────────────────────────────────────────────────────────────────
enum AuditAction {
   create
   modify
   erase
   login
   logout
   other
}

enum AuditStatus {
   active
   archived
}

enum AuditArchiveStatus {
   archived
   pruned
}

// ─── MODELS ────────────────────────────────────────────────────────────────────
model AuditLog {
   id BigInt @id @default(autoincrement()) @db.BigInt

   /// who did it ─
   account_id BigInt @db.BigInt // FK → Account.id

   /// what was affected (polymorphic target) ─
   auditable_id   BigInt?
   auditable_type String?

   /// change data ─
   action       AuditAction @default(other)
   old_values   Json? // diff (before)
   new_values   Json? // diff (after)
   row_snapshot Json? // full record

   /// extras ─
   event             String?
   details           Json?
   target_account_id BigInt?     @db.BigInt // FK → Account.id
   status            AuditStatus @default(active)
   ip_address        String?     @db.VarChar(45)
   user_agent        String?
   created_at        DateTime    @default(now())
   updated_at        DateTime    @updatedAt

   /// relations ─
   account       Account           @relation(fields: [account_id], references: [id], onDelete: Cascade)
   targetAccount Account?          @relation("audit_target_account", fields: [target_account_id], references: [id])
   archives      AuditLogArchive[]

   /// indexes ─
   @@index([account_id])
   @@index([auditable_type, auditable_id])
   @@index([created_at])
   @@map("audit_logs")
}

model AuditLogArchive {
   id BigInt @id @default(autoincrement()) @db.BigInt

   /// optional pointer back to live log
   audit_id BigInt?

   /// who triggered
   account_id BigInt @db.BigInt

   /// target object
   auditable_id   BigInt?
   auditable_type String?

   /// change data
   action       AuditAction
   old_values   Json?
   new_values   Json?
   row_snapshot Json?

   /// archive meta
   status      AuditArchiveStatus @default(archived)
   ip_address  String?            @db.VarChar(45)
   user_agent  String?
   archived_at DateTime
   created_at  DateTime           @default(now())

   /// relations
   account  Account   @relation(fields: [account_id], references: [id])
   auditLog AuditLog? @relation(fields: [audit_id], references: [id], onDelete: SetNull)

   /// indexes
   @@index([archived_at])
   @@index([account_id])
   @@map("audit_log_archives")
}

/// ─── LOGIN LOGS ────────────────────────────────────────────────────────────────
model LoginLog {
   id BigInt @id @default(autoincrement())

   account_id BigInt

   country String
   city    String
   device  String

   // ─ relations ─
   account Account @relation(fields: [account_id], references: [id], onDelete: Cascade)

   @@index([account_id])
   @@map("login_logs")
}

model User {
   id                BigInt      @id @default(autoincrement())
   name              String
   email             String      @unique
   email_verified_at DateTime?
   password          String?
   status            ModelStatus @default(inactive)

   // relations
   accounts Account[]
   services ServiceUser[]

   @@map("users")
}

model Account {
   id BigInt @id @default(autoincrement())

   user_id        BigInt
   type           AccountType
   password       String
   remember_token String?

   // 2-factor
   twofa_secret     String?
   twofa_enabled_at DateTime?

   // localisation / prefs
   lang_id     BigInt?
   currency_id BigInt?
   country_id  BigInt?
   state_id    BigInt?
   phone       String?

   fcm_tokens         Json?
   google_auth_tokens Json?
   status             ModelStatus @default(inactive)

   // finance
   balance Decimal? @db.Decimal(12, 2)

   created_at DateTime @default(now())
   updated_at DateTime @updatedAt

   // ─ relations
   user     User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
   lang     Language?        @relation(fields: [lang_id], references: [id])
   currency Currency?        @relation(fields: [currency_id], references: [id])
   country  Country?         @relation(fields: [country_id], references: [id])
   state    State?           @relation(fields: [state_id], references: [id])
   settings AccountSettings?

   addresses     Address[]
   orders        Order[]
   transaction   Transaction[]
   discounts     UserDiscount[]
   carts         Cart[]
   cartSummaries CartSummary[]
   cartLogs      CartBagLog[]
   cartArchives  CartSummaryArchive[]

   auditLogs       AuditLog[]
   auditTargetLogs AuditLog[]        @relation("audit_target_account")
   auditArchives   AuditLogArchive[]

   /// Lab-task directives
   labAssignedTasks LabTaskDirective[] @relation("lab_directive_assigner")
   labReceivedTasks LabTaskDirective[] @relation("lab_directive_assignee")

   /// Lab-version tasks
   labAssignedVersionTasks LabVersionTask[] @relation("lab_task_assigner") // ← new field name so it’s unique
   labReceivedVersionTasks LabVersionTask[] @relation("lab_task_assignee")

   labVersionsReviewed     ServiceLabVersion[]  @relation("lab_reviewed_by")
   labVersionsApproved     ServiceLabVersion[]  @relation("lab_approved_by")
   labVersionsOwned        ServiceLabVersion[]  @relation("lab_owner_admin")
   labs                    ServiceLab[]
   labHelpRequestsSent     LabTaskHelpRequest[] @relation("lab_help_requester")
   labHelpRequestsReceived LabTaskHelpRequest[] @relation("lab_help_receiver")
   labReviewTasksClaimed   LabReviewTask[]      @relation("lab_review_claimed_by")
   labBranchesCreated      LabBranch[]
   serviceLabels           ServiceLabel[]
   loginLogs               LoginLog[]
   blockedRoutes           RouteListAccount[]
   blockRouteGroups        RouteGroupAccount[]
   reviews                 Review[]
   reviewVotes             ReviewVote[]
   kycList                 KycSubmission[]
   virtualAccounts         VirtualAccount[]
   cards                   SavedCard[]

   @@unique([user_id, type])
   @@index([type])
   @@map("accounts")
}

model AccountSettings {
   id         BigInt   @id @default(autoincrement())
   account_id BigInt   @unique
   settings   Json
   created_at DateTime @default(now())
   updated_at DateTime @updatedAt

   account Account @relation(fields: [account_id], references: [id], onDelete: Cascade)

   @@map("account_settings")
}

model Address {
   id BigInt @id @default(autoincrement())

   account_id     BigInt
   role           AddressRole
   country_id     BigInt
   state_id       BigInt?
   city           String?
   postal_code    String?
   street_line1   String?
   street_line2   String?
   phone          String?
   verified_at    DateTime?
   is_default     Boolean     @default(false)
   effective_from DateTime?
   effective_to   DateTime?
   deleted_at     DateTime?
   created_at     DateTime    @default(now())
   updated_at     DateTime    @updatedAt

   account Account @relation(fields: [account_id], references: [id], onDelete: Cascade)
   country Country @relation(fields: [country_id], references: [id])
   state   State?  @relation(fields: [state_id], references: [id], onDelete: Cascade)

   @@index([account_id])
   @@index([country_id])
   @@map("addresses")
}

model Country {
   id          BigInt      @id @default(autoincrement())
   code        String      @unique @db.Char(2)
   name        String
   dial_code   String
   flag        String
   currency_id BigInt
   status      ModelStatus @default(active)
   created_at  DateTime    @default(now())
   updated_at  DateTime    @updatedAt

   currency  Currency  @relation(fields: [currency_id], references: [id])
   states    State[]
   addresses Address[]
   accounts  Account[]

   @@index([currency_id])
   @@map("countries")
}

model State {
   id         BigInt  @id @default(autoincrement())
   country_id BigInt
   code       String?
   name       String

   country   Country   @relation(fields: [country_id], references: [id], onDelete: Cascade)
   addresses Address[]
   accounts  Account[]

   @@index([country_id])
   @@map("states")
}

model Language {
   id       BigInt      @id @default(autoincrement())
   code     String      @unique // ISO 639-1
   name     String
   file     String // translation file: en.json etc.
   status   ModelStatus @default(active)
   accounts Account[]

   @@map("languages")
}

model Currency {
   id              BigInt      @id @default(autoincrement())
   code            String      @unique @db.Char(3) // USD
   numeric_code    String?     @db.Char(3) // 840
   name            String
   symbol          String
   minor_units     Int
   rate_to_usd     Decimal     @db.Decimal(18, 6)
   rate_updated_at DateTime
   status          ModelStatus @default(active)

   countries Country[]
   accounts  Account[]

   @@map("currencies")
}

// 5432
// ─── ENUMS ─────────────────────────────────────────────────────────────────────
enum CartStatus {
   active
   expired
   checked_out
}

enum CartSummaryStatus {
   paid
   expired
   pending
   cancelled
}

enum CartBagLogStatus {
   created
   updated
   removed
}

enum CartArchiveStatus {
   archived
   pruned
}

// ─── CART SUBSYSTEM (enum-backed status columns) ───────────────────────────────
model Cart {
   id              BigInt     @id @default(autoincrement()) @db.BigInt
   order_id        BigInt?    @db.BigInt
   account_id      BigInt     @db.BigInt
   cart_summary_id BigInt?    @db.BigInt
   status          CartStatus @default(active) // ← enum
   created_at      DateTime   @default(now())
   updated_at      DateTime   @updatedAt

   account     Account           @relation(fields: [account_id], references: [id], onDelete: Cascade)
   order       Order?            @relation(fields: [order_id], references: [id])
   cartSummary CartSummary?      @relation(fields: [cart_summary_id], references: [id])
   summaries   CartSummaryCart[]

   @@unique([account_id, order_id])
   @@index([status])
   @@map("carts")
}

model CartSummary {
   id             BigInt            @id @default(autoincrement()) @db.BigInt
   price          Decimal           @db.Decimal(13, 4)
   payment_amount Decimal           @db.Decimal(13, 4)
   discount       Json?
   account_id     BigInt            @db.BigInt
   status         CartSummaryStatus @default(pending) // ← enum
   expires_at     DateTime?
   created_at     DateTime          @default(now())
   updated_at     DateTime          @updatedAt

   account Account             @relation(fields: [account_id], references: [id], onDelete: Cascade)
   carts   CartSummaryCart[]
   bagLogs CartBagLog[]
   archive CartSummaryArchive?
   Cart    Cart[]

   @@index([account_id, status])
   @@index([expires_at])
   @@map("cart_summaries")
}

model CartSummaryCart {
   cart_summary_id BigInt @db.BigInt
   cart_id         BigInt @db.BigInt

   cartSummary CartSummary @relation(fields: [cart_summary_id], references: [id], onDelete: Cascade)
   cart        Cart        @relation(fields: [cart_id], references: [id], onDelete: Cascade)

   @@id([cart_summary_id, cart_id])
   @@map("cart_summary_carts")
}

model CartBagLog {
   id              BigInt           @id @default(autoincrement()) @db.BigInt
   account_id      BigInt           @db.BigInt
   order_id        BigInt           @db.BigInt
   cart_summary_id BigInt           @db.BigInt
   snapshot        Json
   status          CartBagLogStatus // ← enum
   logged_at       DateTime         @default(now())

   account     Account     @relation(fields: [account_id], references: [id], onDelete: Cascade)
   order       Order?      @relation(fields: [order_id], references: [id])
   cartSummary CartSummary @relation(fields: [cart_summary_id], references: [id])

   @@index([account_id])
   @@index([order_id])
   @@map("cart_bag_logs")
}

model CartSummaryArchive {
   id              BigInt            @id @default(autoincrement()) @db.BigInt
   cart_summary_id BigInt            @unique @db.BigInt
   account_id      BigInt            @db.BigInt
   status          CartArchiveStatus @default(archived) // ← enum
   amount          Decimal           @db.Decimal(13, 4)
   snapshot        Json
   archived_at     DateTime
   created_at      DateTime          @default(now())

   cartSummary CartSummary @relation(fields: [cart_summary_id], references: [id], onDelete: Cascade)
   account     Account     @relation(fields: [account_id], references: [id])

   @@index([archived_at])
   @@map("cart_summary_archives")
}
model Platform {
   id                BigInt             @id @default(autoincrement()) @db.BigInt
   name              String
   url               String?            @default("*") @db.Text
   aliases           Json? // e.g insta, IG and so on
   image             String?            @db.Text
   icon              String?            @db.Text
   color             String?
   status            ModelStatus        @default(active)
   created_at        DateTime           @default(now())
   updated_at        DateTime           @updatedAt
   labTaskDirectives LabTaskDirective[]

   // relations
   services Service[]

   @@map("platforms")
}

model Category {
   id          BigInt      @id @default(autoincrement()) @db.BigInt
   name        String      @unique
   category_id BigInt?     @db.BigInt // self-reference
   status      ModelStatus @default(active)
   created_at  DateTime    @default(now())
   updated_at  DateTime    @updatedAt

   // self-relation
   parent   Category?  @relation("CategoryParent", fields: [category_id], references: [id], onDelete: Cascade)
   children Category[] @relation("CategoryParent")

   // relations
   services Service[]

   @@map("categories")
}

model DgpHandler {
   id           BigInt      @id @default(autoincrement())
   name         String      @unique
   image        String?     @db.Text
   display_name String
   description  String?     @db.Text
   alias        String?
   plugin_id    BigInt?     @db.BigInt // external – left un-related here
   status       ModelStatus @default(inactive)
   created_at   DateTime    @default(now())
   updated_at   DateTime    @updatedAt

   // relations
   dgp_services        DgpService[]
   services            Service[]
   orders              Order[]
   activeStubs         ActiveOrderStub[]
   labTaskDirectives   LabTaskDirective[]
   problematicServices ProblematicService[]

   @@map("dgp_handlers")
}

model DgpService {
   id             BigInt  @id @default(autoincrement())
   service        BigInt? @db.BigInt // remote/provider id
   key            String
   name           String
   type           String
   rate           Float
   min            Int
   max            Int
   dripfeed       Boolean @default(false)
   refill         Boolean @default(false)
   sync_version   Boolean @default(false)
   cancel         Boolean @default(false)
   category       String
   dgp_handler_id BigInt  @db.BigInt

   meta       Json?
   originals  Json?
   status     ModelStatus @default(active)
   created_at DateTime    @default(now())
   updated_at DateTime    @updatedAt

   // relations
   handler     DgpHandler        @relation(fields: [dgp_handler_id], references: [id], onDelete: Cascade)
   tags        DgpServiceTag[]
   activeStubs ActiveOrderStub[]

   @@unique([dgp_handler_id, key])
   @@map("dgp_services")
}

model Service {
   id                BigInt      @id @default(autoincrement()) @db.BigInt
   dgp_handler_id    BigInt      @db.BigInt
   platform_id       BigInt      @db.BigInt
   name              String
   category_id       BigInt      @db.BigInt
   props             Json?
   image             String?
   meta              Json?
   type              ServiceType @default(preset)
   requires_contract Boolean     @default(false)
   status            ModelStatus @default(inactive)
   created_at        DateTime    @default(now())
   updated_at        DateTime    @updatedAt

   // relations
   handler  DgpHandler @relation(fields: [dgp_handler_id], references: [id])
   platform Platform   @relation(fields: [platform_id], references: [id])
   category Category   @relation(fields: [category_id], references: [id])

   users         ServiceUser[]
   userDiscounts UserDiscount[]
   discounts     Discount[]
   lab           ServiceLab?
   serviceLabels ServiceLabel[]

   @@unique([dgp_handler_id, name])
   @@map("services")
}

model ServiceUser {
   id         BigInt    @id @default(autoincrement()) @db.BigInt
   service_id BigInt    @db.BigInt
   user_id    BigInt    @db.BigInt
   expire_at  DateTime? // access ends at this moment (null = never expires)
   created_at DateTime  @default(now())
   updated_at DateTime  @updatedAt

   // ───── relations ────────────────────────────────────────────────────────────
   service Service @relation(fields: [service_id], references: [id])
   user    User    @relation(fields: [user_id], references: [id])

   @@unique([service_id, user_id]) // one record per user-service pair
   @@map("service_users") // DB table name
}
/// ─── SERVICE LABELS ────────────────────────────────────────────────────────────
model ServiceLabel {
   id               BigInt  @id @default(autoincrement())
   name             String
   slug             String
   immutable        Boolean @default(false)
   priority         Int
   active           Boolean @default(true)
   service_id       BigInt
   account_id       BigInt?

   // ─ relations ─
   service Service  @relation(fields: [service_id], references: [id], onDelete: Cascade)
   account Account? @relation(fields: [account_id], references: [id])

   @@index([service_id])
   @@map("service_labels")
}
/// ─────────────────────────────────────────────────────────────
///  DISCOUNTS  &  PER-USER TRACKING  (no Order model shown)
/// ─────────────────────────────────────────────────────────────

enum DiscountStatus {
   expired
   active
   inactive
}

model Discount {
   id          BigInt         @id @default(autoincrement())
   name        String
   discount_by String // "percentage" | "amount"
   value       Float // Decimal(10,2) if you prefer
   services    String // comma-separated or JSON list
   service_id  BigInt? // if set, discount valid only for this service
   status      DiscountStatus @default(active) // "active" | "expired" | …
   max_use     BigInt
   usage       BigInt
   expires     DateTime?

   created_at    DateTime       @default(now())
   updated_at    DateTime       @updatedAt
   // relations
   service       Service?       @relation(fields: [service_id], references: [id], onDelete: SetNull)
   userDiscounts UserDiscount[]

   @@map("discounts")
}

model UserDiscount {
   id          BigInt    @id @default(autoincrement())
   discount_id BigInt
   account_id  BigInt
   order_id    BigInt? // filled when the user actually checks out
   service_id  BigInt? // service against which the discount is applied
   used_at     DateTime? // set exactly when the discount is consumed

   created_at DateTime @default(now())
   updated_at DateTime @updatedAt
   // relations
   data       Discount @relation(fields: [discount_id], references: [id], onDelete: Cascade)
   account    Account  @relation(fields: [account_id], references: [id], onDelete: Cascade)
   order      Order?   @relation(fields: [order_id], references: [id], onDelete: SetNull)
   service    Service? @relation(fields: [service_id], references: [id], onDelete: SetNull)

   // ensures a user cannot reuse the same discount on the same service
   @@unique([discount_id, account_id, service_id])
   @@map("user_discounts")
}
enum ModelStatus {
   active
   inactive
   disabled
}

enum AccountType {
   user
   admin
}

enum AddressRole {
   primary
   billing
   registered
   correspondence
}

enum TransactionType {
   in
   out
}

enum ServiceType {
   custom
   preset
}

enum OrderStatus {
   pending
   processing
   partial
   inactive
   failed
   completed
}
// ───── ENUMS ─────
enum TransactionStatus {
   pending
   processing
   completed
   failed
}

enum EscrowStatus {
   hold
   partial_released
   released
   expired
}

// ───── TRANSACTIONS ─────
model Transaction {
   id                 BigInt            @id @default(autoincrement())
   account_id         BigInt
   invoice_receipt_id BigInt            @unique
   gateway_id         BigInt // FK → payment_gateways.id
   for                String // "order" | "wallet_topup"
   amount             Decimal           @db.Decimal(12, 2)
   currency           String            @default("USD")
   status             TransactionStatus @default(pending)
   transaction_ref    String            @unique
   meta               Json?
   created_at         DateTime          @default(now())
   updated_at         DateTime          @updatedAt

   // relations
   account        Account          @relation(fields: [account_id], references: [id], onDelete: Cascade)
   invoiceReceipt InvoiceReceipt   @relation(fields: [invoice_receipt_id], references: [id], onDelete: Cascade)
   escrow         Escrow?
   logs           TransactionLog[]
   gateway        PaymentGateway?  @relation(fields: [gateway_id], references: [id])

   @@map("transactions")
}

enum TransactionEventType {
   state_change // status transitioned
   webhook // gateway callback
   manual_override // admin intervention
   note // informational / comment
}

// ─────────────────────────────────────────────
//  TRANSACTION LOG  (updated)
// ─────────────────────────────────────────────
model TransactionLog {
   id              BigInt               @id @default(autoincrement())
   transaction_id  BigInt
   event_type      TransactionEventType
   previous_status TransactionStatus? // null if not a state change
   status          TransactionStatus
   note            String?
   meta            Json?
   created_at      DateTime             @default(now())

   // relations
   transaction Transaction @relation(fields: [transaction_id], references: [id], onDelete: Cascade)

   @@index([transaction_id])
   @@map("transaction_logs")
}

// ───── ESCROW ─────
model Escrow {
   id              BigInt       @id @default(autoincrement())
   transaction_id  BigInt       @unique
   status          EscrowStatus @default(hold)
   hold_amount     Decimal      @db.Decimal(12, 2)
   released_amount Decimal      @default(0) @db.Decimal(12, 2)
   expires_at      DateTime?
   created_at      DateTime     @default(now())
   updated_at      DateTime     @updatedAt

   // relations
   transaction Transaction     @relation(fields: [transaction_id], references: [id], onDelete: Cascade)
   releases    EscrowRelease[]

   @@map("escrows")
}

model EscrowRelease {
   id         BigInt   @id @default(autoincrement())
   escrow_id  BigInt
   amount     Decimal  @db.Decimal(12, 2)
   note       String?
   created_at DateTime @default(now())

   escrow Escrow @relation(fields: [escrow_id], references: [id], onDelete: Cascade)

   @@map("escrow_releases")
}

// ───── INVOICE RECEIPT (pointer) ─────
model InvoiceReceipt {
   id         BigInt   @id @default(autoincrement())
   status     String // pending | paid | fail  (kept simple here)
   meta       Json?
   created_at DateTime @default(now())

   transaction Transaction?

   @@map("invoice_receipts")
}

// ───── PAYMENT GATEWAY (excerpt) ─────
model PaymentGateway {
   id        BigInt  @id @default(autoincrement())
   name      String
   is_wallet Boolean @default(false)
   meta      Json?

   transactions Transaction[]

   @@map("payment_gateways")
   VirtualAccount VirtualAccount[]
}



model VirtualAccount {
  id                  BigInt   @id @default(autoincrement()) @db.BigInt // primary key
  account_id          BigInt   @db.BigInt                         // FK to accounts table
  gateway_id          BigInt   @db.BigInt                         // FK to payment_gateways
  provider_account_id String                                     // account ID from provider
  account_number      String                                     // visible account number
  bank_code           String                                     // code of bank
  bank_name           String                                     // name of bank
  currency            String                                     // currency (e.g., NGN)
  status              String   @default("inactive")              // status of account
  created_at          DateTime @default(now())                   // created timestamp
  updated_at          DateTime @updatedAt                        // updated timestamp

  account     Account         @relation(fields: [account_id], references: [id])        // relation to account
  gateway     PaymentGateway  @relation(fields: [gateway_id], references: [id])        // relation to payment gateway

  @@map("virtual_accounts")                                                        // table name
}

model SavedCard {
  id          BigInt   @id @default(autoincrement()) @db.BigInt // primary key
  account_id          BigInt   @db.BigInt                         // FK to accounts table
  token       String                                     // tokenized card identifier
  fingerprint String                                     // unique card fingerprint
  brand       String                                     // card brand (e.g., Visa)
  last4       String                                     // last four digits
  exp_month   Int                                        // expiration month
  exp_year    Int                                        // expiration year
  is_default  Boolean  @default(false)                   // default payment method?
  created_at  DateTime @default(now())                   // record creation timestamp
  updated_at  DateTime @updatedAt                        // record last-update timestamp

  account     Account         @relation(fields: [account_id], references: [id])        // relation to account

  @@map("saved_cards")                                              // custom table name
}model KycForm {
   id         BigInt          @id @default(autoincrement())
   label      String
   template   Json
   is_default Boolean         @default(false) @map("default")
   status     ModelStatus     @default(active)
   created_at DateTime        @default(now())
   updated_at DateTime        @updatedAt
   forms      KycSubmission[]

   @@map("kyc_forms")
}

enum KycStatus {
   pending
   approved
   rejected
}

model KycSubmission {
   id            BigInt    @id @default(autoincrement())
   account_id    BigInt
   kyc_form_id   BigInt
   data          Json
   status        KycStatus @default(pending)
   reject_reason String?
   submitted_at  DateTime  @default(now())
   reviewed_at   DateTime?

   // ─ relations ─
   account Account @relation(fields: [account_id], references: [id], onDelete: Cascade)
   kycForm KycForm @relation(fields: [kyc_form_id], references: [id], onDelete: Cascade)

   @@index([account_id])
   @@index([kyc_form_id])
   @@map("kyc_submissions")
}
// ─── ENUMS ─────────────────────────────────────────────────────────────────────
enum LabStatus {
   active
   inactive
   archived
}

enum LabStage {
   draft
   review
   approved
   rejected
}

enum LabTaskStatus {
   pending
   in_progress
   done
}

enum HelpRequestType {
   help
   collaboration
}

enum HelpRequestStatus {
   pending
   accepted
   rejected
   cancelled
}

enum ReviewTaskType {
   review
   approval
}

enum LabBranchStatus {
   open
   merged
   closed
}

/// ==========================================================================
/// SERVICE LABS – top-level record
/// ==========================================================================
model ServiceLab {
   id         BigInt    @id @default(autoincrement()) @db.BigInt
   account_id BigInt?   @db.BigInt // FK → Account.id  (owner / creator)
   service_id BigInt    @unique @db.BigInt // FK → Service.id
   title      String
   meta       Json?
   status     LabStatus @default(active)
   created_at DateTime  @default(now())
   updated_at DateTime  @updatedAt

   // relations
   account  Account?            @relation(fields: [account_id], references: [id], onDelete: SetNull)
   service  Service             @relation(fields: [service_id], references: [id], onDelete: Cascade)
   versions ServiceLabVersion[]

   @@index([account_id])
   @@index([service_id])
}

/// ==========================================================================
/// SERVICE LAB VERSIONS – history
/// ==========================================================================
model ServiceLabVersion {
   id                BigInt    @id @default(autoincrement()) @db.BigInt
   service_lab_id    BigInt    @db.BigInt
   version           Int
   snapshot          Json
   meta              Json?
   notes             String?   @db.Text
   stage             LabStage  @default(draft)
   reviewed_at       DateTime?
   approved_at       DateTime?
   parent_version_id BigInt?
   reviewed_by_id    BigInt?
   approved_by_id    BigInt?
   account_id        BigInt? // original “admin_id”
   created_at        DateTime  @default(now())
   updated_at        DateTime  @updatedAt

   // relations
   serviceLab    ServiceLab           @relation(fields: [service_lab_id], references: [id], onDelete: Cascade)
   parentVersion ServiceLabVersion?   @relation("lab_parent", fields: [parent_version_id], references: [id])
   childVersions ServiceLabVersion[]  @relation("lab_parent")
   reviewedBy    Account?             @relation("lab_reviewed_by", fields: [reviewed_by_id], references: [id])
   approvedBy    Account?             @relation("lab_approved_by", fields: [approved_by_id], references: [id])
   account       Account?             @relation("lab_owner_admin", fields: [account_id], references: [id])
   tasks         LabVersionTask[]
   helpRequests  LabTaskHelpRequest[]
   reviewTasks   LabReviewTask[]
   branches      LabBranch[]

   @@index([service_lab_id])
   @@index([stage])
}

/// ==========================================================================
/// LAB VERSION TASKS – generic tasks per version
/// ==========================================================================
model LabVersionTask {
   id             BigInt        @id @default(autoincrement()) @db.BigInt
   version_id     BigInt        @db.BigInt
   assigned_by_id BigInt        @db.BigInt
   assigned_to_id BigInt        @db.BigInt
   note           String?       @db.Text
   status         LabTaskStatus @default(pending)
   created_at     DateTime      @default(now())

   // relations
   version    ServiceLabVersion @relation(fields: [version_id], references: [id], onDelete: Cascade)
   assignedBy Account           @relation("lab_task_assigner", fields: [assigned_by_id], references: [id])
   assignedTo Account           @relation("lab_task_assignee", fields: [assigned_to_id], references: [id])

   @@index([version_id])
}

/// ==========================================================================
/// LAB TASK DIRECTIVES – stand-alone briefs / directives
/// ==========================================================================
model LabTaskDirective {
   id             BigInt        @id @default(autoincrement()) @db.BigInt
   title          String
   description    String?       @db.Text
   meta           Json?
   handler_id     BigInt        @db.BigInt // FK → SmmHandler.id
   platform_id    BigInt        @db.BigInt // FK → Platform.id
   assigned_by_id BigInt        @db.BigInt
   assigned_to_id BigInt        @db.BigInt
   status         LabTaskStatus @default(pending)
   due_at         DateTime?
   created_at     DateTime      @default(now())

   // relations
   handler    DgpHandler @relation(fields: [handler_id], references: [id])
   platform   Platform   @relation(fields: [platform_id], references: [id])
   assignedBy Account    @relation("lab_directive_assigner", fields: [assigned_by_id], references: [id])
   assignedTo Account    @relation("lab_directive_assignee", fields: [assigned_to_id], references: [id])

   @@index([handler_id])
   @@index([platform_id])
}

/// ==========================================================================
/// LAB TASK HELP REQUESTS – help / collaboration invitations
/// ==========================================================================
model LabTaskHelpRequest {
   id               BigInt            @id @default(autoincrement()) @db.BigInt
   version_id       BigInt            @db.BigInt
   requester_id     BigInt            @db.BigInt
   receiver_id      BigInt            @db.BigInt
   message          String?           @db.Text
   type             HelpRequestType
   response_message String?           @db.Text
   status           HelpRequestStatus @default(pending)
   accepted_at      DateTime?
   created_at       DateTime          @default(now())

   // relations
   version   ServiceLabVersion @relation(fields: [version_id], references: [id], onDelete: Cascade)
   requester Account           @relation("lab_help_requester", fields: [requester_id], references: [id])
   receiver  Account           @relation("lab_help_receiver", fields: [receiver_id], references: [id])

   @@index([version_id])
}

/// ==========================================================================
/// LAB REVIEW TASKS – one per version & role
/// ==========================================================================
model LabReviewTask {
   id            BigInt         @id @default(autoincrement()) @db.BigInt
   version_id    BigInt         @db.BigInt
   type          ReviewTaskType
   claimed_by_id BigInt?
   status        LabTaskStatus
   created_at    DateTime       @default(now())

   // relations
   version   ServiceLabVersion @relation(fields: [version_id], references: [id], onDelete: Cascade)
   claimedBy Account?          @relation("lab_review_claimed_by", fields: [claimed_by_id], references: [id])

   @@index([version_id])
}

/// ==========================================================================
/// LAB BRANCHES – branch-style snapshots
/// ==========================================================================
model LabBranch {
   id            BigInt          @id @default(autoincrement()) @db.BigInt
   version_id    BigInt          @db.BigInt
   created_by_id BigInt          @db.BigInt
   title         String
   meta          Json?
   snapshot      Json
   status        LabBranchStatus @default(open)
   is_main       Boolean         @default(false)
   created_at    DateTime        @default(now())

   // relations
   version   ServiceLabVersion @relation(fields: [version_id], references: [id], onDelete: Cascade)
   createdBy Account           @relation(fields: [created_by_id], references: [id])

   @@index([version_id])
}
/// ─── PROBLEMATIC SERVICES ─────────────────────────────────────────────────────
model ProblematicService {
   id         BigInt @id @default(autoincrement())
   key        String // external service key
   handler_id BigInt

   failure_count  Int       @default(0)
   last_failed_at DateTime?

   // relations
   handler DgpHandler @relation(fields: [handler_id], references: [id], onDelete: Cascade)

   @@unique([handler_id, key])
   @@map("problematic_services")
}

/// ─── SYNC TRACKERS ─────────────────────────────────────────────────────────────
model SyncTracker {
   tag            String    @id // service alias or tag
   version        Int
   last_synced_at DateTime?

   @@map("sync_trackers")
}

model DgpServiceTag {
   id             BigInt   @id @default(autoincrement()) @db.BigInt
   dgp_service_id BigInt   @db.BigInt
   tag            String
   severity       String
   meta           Json?
   created_at     DateTime @default(now())
   updated_at     DateTime @updatedAt

   // relations
   dgp_service DgpService @relation(fields: [dgp_service_id], references: [id])

   @@map("dgp_service_tags")
}
/// NOTIFICATION CATEGORIES 
model NotificationCategory {
   id                 BigInt      @id @default(autoincrement()) @db.BigInt
   name               String
   parent_category_id BigInt?     @db.BigInt
   can_be_silenced    Boolean
   status             ModelStatus @default(active)

   // self-relation (parent ⇄ children)
   parentCategory  NotificationCategory?  @relation("category_parent", fields: [parent_category_id], references: [id])
   childCategories NotificationCategory[] @relation("category_parent")

   // other relations
   notifications Notification[]
   templates     NotificationTemplate[]

   @@index([parent_category_id])
   @@map("notification_categories")
}

/// NOTIFICATIONS 
model Notification {
   id              String    @id @default(uuid()) @db.Char(36)
   type            String
   notifiable_type String
   notifiable_id   BigInt    @db.BigInt
   data            String    @db.Text
   category_id     BigInt    @db.BigInt
   read_at         DateTime?

   // relation
   category NotificationCategory @relation(fields: [category_id], references: [id])

   @@index([notifiable_type, notifiable_id])
   @@map("notifications")
}

/// NOTIFICATION TEMPLATES 
model NotificationTemplate {
   key           String @id
   subject       String
   codes         Json
   default_codes Json   @map("default_codes")
   email_status  Int    @map("email_status")
   log_status    Int    @map("log_status")
   push_status   Int    @map("push_status")
   sms_status    Int    @map("sms_status")
   flash_status  Int    @map("flash_status")
   admin_status  Int    @map("admin_status")
   email         Json
   log           Json
   push          Json
   flash         Json
   sms           Json
   admin         Json

   /// New: alias ⇒ ModelName, e.g. { "order": "Order", "user": "User" }
   associated_models Json? @map("associated_models")

   /// New: code ⇒ "alias.field", e.g. { "phishing_code": "order.id" }
   code_mappings Json? @map("code_mappings")

   category_id BigInt
   status      ModelStatus @default(active)

   // relations 
   category NotificationCategory @relation(fields: [category_id], references: [id])

   @@index([category_id])
   @@map("notification_templates")
}
model Order {
   id BigInt @id @default(autoincrement())

   account_id     BigInt
   service_id     BigInt
   dgp_handler_id BigInt?

   label          String
   amount         Decimal @db.Decimal(10, 2)
   token          String  @unique
   ref            String  @unique
   transaction_id BigInt

   snapshot   Json
   created_at DateTime       @default(now())
   updated_at DateTime       @updatedAt
   // relations
   handler    DgpHandler?    @relation(fields: [dgp_handler_id], references: [id], onDelete: SetNull)
   account    Account        @relation(fields: [account_id], references: [id])
   discounts  UserDiscount[]

   dripfeeds     OrderDripfeed[]
   failedStubs   FailedOrderStub[]
   activeStubs   ActiveOrderStub[]
   contract      OrderContract?
   tickets       Ticket[]
   activeRefills ActiveRefill[]
   carts Cart[]
   cartLogs CartBagLog[]

   @@map("orders")
}

/// ──────────────────────────────────────────────
///  ORDER-RELATED TRACKING TABLES
/// ──────────────────────────────────────────────

model OrderDripfeed {
   id          BigInt      @id @default(autoincrement())
   order_id    BigInt
   quantity    BigInt // unsignedBigInteger
   max         BigInt // unsignedBigInteger
   interval_id BigInt // FK → intervals.id  (relation optional; see note)
   status      OrderStatus @default(processing)
   created_at  DateTime    @default(now())
   updated_at  DateTime    @updatedAt
   // — Relations —
   data        Order       @relation(fields: [order_id], references: [id], onDelete: Cascade)
   interval    Interval    @relation(fields: [interval_id], references: [id])

   // one status row per order
   @@unique([order_id])
   @@map("order_dripfeed")
}

model FailedOrderStub {
   id       BigInt    @id @default(autoincrement())
   order_id BigInt
   status   String
   error    String? // text
   attempts Int // unsignedInteger
   retry_at DateTime?
   data     Json?

   // — Relations —
   order Order @relation(fields: [order_id], references: [id], onDelete: Cascade)

   @@map("failed_order_stubs")
}

// ─────────────────────────────────────────────
//  ActiveOrderStub  (composite FK ⇒ DgpService)
// ─────────────────────────────────────────────
model ActiveOrderStub {
   id              BigInt    @id @default(autoincrement())
   order_id        BigInt
   dgp_handler_id  BigInt // NEW: must match the service’s handler
   service         String // the service “key”
   expected_amount BigInt
   amount_done     BigInt
   charge          Decimal   @db.Decimal(10, 2)
   status          String
   stale_at        DateTime?

   created_at DateTime @default(now())
   updated_at DateTime @updatedAt
   // ── Relations ─────────────────────────────
   order      Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)

   dgpService DgpService @relation(fields: [dgp_handler_id, service], references: [dgp_handler_id, key], onDelete: Cascade)

   // optional, if you need to traverse to the handler directly
   handler DgpHandler @relation(fields: [dgp_handler_id], references: [id], onDelete: Cascade)

   @@map("active_order_stubs")
}

model SavedOrder {
   id         BigInt @id @default(autoincrement())
   order_id   BigInt
   account_id BigInt
}

model Interval {
   id     BigInt          @id @default(autoincrement())
   name   String          @unique
   time   BigInt // time in seconds
   orders OrderDripfeed[]

   @@map("intervals")
}

model OrderContract {
   id               BigInt   @id @default(autoincrement())
   order_id         BigInt   @unique
   ticket_id        BigInt? // Optional FK to support ticket system
   chat_room_id     BigInt? // Optional FK for live chat room
   file_url         String? // Or use contract_text: String for inline text
   signed_by_client Boolean  @default(false)
   signed_by_team   Boolean  @default(false)
   created_at       DateTime @default(now())
   updated_at       DateTime @updatedAt

   // — Relations —
   order Order @relation(fields: [order_id], references: [id], onDelete: Cascade)

   // Optional: define ticket and chat relations if models exist
   ticket   Ticket?   @relation(fields: [ticket_id], references: [id], onDelete: SetNull)
   chatRoom ChatRoom? @relation(fields: [chat_room_id], references: [id], onDelete: SetNull)

   @@map("order_contracts")
}

model ActiveRefill {
   id              BigInt    @id @default(autoincrement())
   order_id        BigInt
   token           String    @unique
   dgp_service_key String
   start_count     Int
   refilled_count  Int       @default(0)
   completed_at    DateTime?

   order  Order       @relation(fields: [order_id], references: [id])
   status ModelStatus

   @@map("active_refills")
}
/// ROUTE LIST (individual routes) 
model RouteList {
   id         BigInt      @id @default(autoincrement())
   name       String      @unique
   route      String      @unique
   desc       String
   status     ModelStatus @default(active)
   created_at DateTime    @default(now())
   updated_at DateTime    @updatedAt

   // route-level blocking
   blockedAccounts RouteListAccount[]
   blockedRoles    RouteListRole[]

   // group membership
   groups RouteGroupRouteList[]

   @@map("route_lists")
}

/// ROUTE GROUP (logical groups of routes) 
model RouteGroup {
   id         BigInt      @id @default(autoincrement())
   name       String      @unique
   status     ModelStatus @default(active)
   created_at DateTime    @default(now())
   updated_at DateTime    @updatedAt

   // group-level blocking
   blockedAccounts RouteGroupAccount[]
   blockedRoles    RouteGroupRole[]

   // membership of routes
   routes RouteGroupRouteList[]

   @@map("route_groups")
}

///  PIVOT: assign routes to groups 
model RouteGroupRouteList {
   route_group_id BigInt @db.BigInt
   route_list_id  BigInt @db.BigInt

   routeGroup RouteGroup @relation(fields: [route_group_id], references: [id], onDelete: Cascade)
   routeList  RouteList  @relation(fields: [route_list_id], references: [id], onDelete: Cascade)

   @@id([route_group_id, route_list_id])
   @@map("route_group_route_lists")
}

/// PIVOT: block accounts on a group 
model RouteGroupAccount {
   route_group_id BigInt @db.BigInt
   account_id     BigInt @db.BigInt

   routeGroup RouteGroup @relation(fields: [route_group_id], references: [id], onDelete: Cascade)
   account    Account    @relation(fields: [account_id], references: [id], onDelete: Cascade)

   @@id([route_group_id, account_id])
   @@map("route_group_accounts")
}

/// PIVOT: block roles on a group 
model RouteGroupRole {
   route_group_id BigInt @db.BigInt
   role           String

   routeGroup RouteGroup @relation(fields: [route_group_id], references: [id], onDelete: Cascade)

   @@id([route_group_id, role])
   @@map("route_group_roles")
}

/// PIVOT: block accounts on a route 
model RouteListAccount {
   route_list_id BigInt @db.BigInt
   account_id    BigInt @db.BigInt

   routeList RouteList @relation(fields: [route_list_id], references: [id], onDelete: Cascade)
   account   Account   @relation(fields: [account_id], references: [id], onDelete: Cascade)

   @@id([route_list_id, account_id])
   @@map("route_list_accounts")
}

///  PIVOT: block roles on a route 
model RouteListRole {
   route_list_id BigInt @db.BigInt
   role          String

   routeList RouteList @relation(fields: [route_list_id], references: [id], onDelete: Cascade)

   @@id([route_list_id, role])
   @@map("route_list_roles")
}

/// PAGE ACTIONS 
model PageAction {
   id          BigInt      @id @default(autoincrement())
   name        String      @unique
   description String      @map("desc")
   props       Json
   status      ModelStatus @default(active)
   created_at  DateTime    @default(now())
   updated_at  DateTime    @updatedAt

   @@map("page_actions")
}
// ─── ENUMS ────────────────────────────────────────────────
enum PluginStatus {
   active
   inactive
   archived
}

// ─── MODELS ───────────────────────────────────────────────

// 1. tags
model Tag {
   id         BigInt       @id @default(autoincrement()) @db.BigInt
   name       String       @unique
   is_system  Boolean      @default(false)
   status     PluginStatus @default(active)
   created_at DateTime     @default(now())
   updated_at DateTime     @updatedAt

   // relations
   plugins               Plugin[]
   plugin_db_permissions PluginDbPermission[]

   @@map("tags")
}

// 2. plugins
model Plugin {
   id         BigInt       @id @default(autoincrement()) @db.BigInt
   name       String       @unique
   image      String?
   tag_id     BigInt
   status     PluginStatus @default(active)
   config     Json?
   meta       Json?
   created_at DateTime     @default(now())
   updated_at DateTime     @updatedAt

   // relations
   tag          Tag          @relation(fields: [tag_id], references: [id])
   api_settings ApiSetting[]

   @@index([tag_id])
   @@map("plugins")
}

// 3. api_settings
model ApiSetting {
   id          BigInt       @id @default(autoincrement()) @db.BigInt
   plugin_id   BigInt
   name        String
   alias       String
   website_url String
   settings    Json?
   status      PluginStatus @default(active)
   created_at  DateTime     @default(now())
   updated_at  DateTime     @updatedAt

   // relation
   plugin Plugin @relation(fields: [plugin_id], references: [id])

   @@index([plugin_id])
   @@map("api_settings")
}

// 4. plugin_zips
model PluginZip {
   id         BigInt       @id @default(autoincrement()) @db.BigInt
   path       String       @db.Text
   base_path  String       @db.Text
   status     PluginStatus @default(active)
   created_at DateTime     @default(now())
   updated_at DateTime     @updatedAt

   @@map("plugin_zips")
}

// 5. plugin_db_permissions
model PluginDbPermission {
   id         BigInt   @id @default(autoincrement()) @db.BigInt
   model      String
   tag_id     BigInt
   select     Boolean  @default(false)
   insert     Boolean  @default(false)
   update     Boolean  @default(false)
   delete     Boolean  @default(false)
   required   Boolean  @default(false)
   created_at DateTime @default(now())
   updated_at DateTime @updatedAt

   // relation
   tag Tag @relation(fields: [tag_id], references: [id])

   @@unique([model, tag_id])
   @@index([tag_id])
   @@map("plugin_db_permissions")
}
enum ReviewStatus {
   pending
   approved
   rejected
}

model Review {
   id              BigInt       @id @default(autoincrement())
   account_id      BigInt
   reviewable_type String
   reviewable_id   BigInt
   rating          Int
   review          String
   status          ReviewStatus @default(pending)
   admin_comment   String?
   created_at      DateTime     @default(now())
   updated_at      DateTime     @updatedAt

   // relations 
   account    Account      @relation(fields: [account_id], references: [id], onDelete: Cascade)
   votes ReviewVote[]

   @@index([reviewable_type, reviewable_id])
   @@index([account_id])
   @@map("reviews")
}

model ReviewVote {
   review_id  BigInt
   account_id BigInt
   is_helpful Boolean

   review  Review  @relation(fields: [review_id], references: [id], onDelete: Cascade)
   account Account @relation(fields: [account_id], references: [id], onDelete: Cascade)

   @@id([review_id, account_id])
   @@map("review_votes")
}
enum ThemeMode {
   light
   dark
}

model SiteSetting {
   id                BigInt    @id @default(autoincrement())
   name              String    @unique
   is_default        Boolean   @default(false)
   //----
   site_name         String
   site_logo         String    @db.Text
   site_url          String
   banner_text       String    @db.Text
   favicon           String    @db.Text
   site_icon         String    @db.Text
   //---
   registration      Boolean   @default(false)
   maintenance       Boolean   @default(false)
   debug             Boolean
   //-- verification
   verify_email      Boolean   @default(true)
   verify_phone      Boolean   @default(false)
   recaptcha         Boolean   @default(false)
   verify_kyc        Boolean   @default(false)
   //--notification
   notify_push       Boolean   @default(true)
   notify_email      Boolean   @default(true)
   notify_sms        Boolean   @default(false)
   notify_admin      Boolean   @default(false)
   // appearance
   mode              ThemeMode @default(light)
   color_id          BigInt
   font_id           BigInt
   // defaults
   currency_id       BigInt
   lang_id           BigInt
   email_settings_id BigInt
   // admin
   two_factor        Boolean   @default(true) // must authenticate admin

   @@map("site_settings")
}

model ContactBus {
   id   BigInt @id @default(autoincrement())
   name String @unique
   icon String @db.Text
   url  String @db.Text

   @@map("contact_buses")
}

model SiteColors {
   id    BigInt @id @default(autoincrement())
   value String @db.Text

   @@map("site_colors")
}

model SiteFont {
   id     BigInt @id @default(autoincrement())
   name   String @unique
   url    String @db.Text
   banner String @db.Text

   @@map("site_fonts")
}

model EmailSetting {
   id                   BigInt @id @default(autoincrement())
   name                 String @unique
   //--
   contact_email_type   String
   contact_email_from   String
   contact_email_config Json
   contact_email_name   String
   //---
   ticket_email_type    String
   ticket_email_from    String
   ticket_email_config  Json
   ticket_email_name    String
   //---
   suppory_email_type   String
   suppory_email_from   String
   suppory_email_config Json
   suppory_email_name   String
   @@map("email_settings")
}

model SeoSetting {
   id           BigInt  @id @default(autoincrement())
   // Context: which page or model this applies to
   page_slug    String?
   seoable_type String?
   seoable_id   BigInt?

   title            String
   meta_tags        Json? // e.g. ["keyword1","keyword2"]
   meta_description String
   meta_image       String?

   // Optional extra social fields
   og_title       String?
   og_description String?
   og_image       String?

   // Lifecycle
   status     ModelStatus @default(active)
   created_at DateTime    @default(now())
   updated_at DateTime    @updatedAt

   @@index([page_slug])
   @@index([seoable_type, seoable_id])
   @@map("seo_settings")
}
// ─────────────────────────────────────────────
//  ENUMS
// ─────────────────────────────────────────────
enum TicketStatus {
   open
   in_progress
   resolved
   closed
}

enum TicketPriority {
   low
   medium
   high
   urgent
}

// ─────────────────────────────────────────────
//  TICKETS
// ─────────────────────────────────────────────
model TicketCategory {
   id          BigInt  @id @default(autoincrement())
   name        String  @unique
   description String?
   fields      Json? // JSON schema or key-value set describing required inputs

   // relations
   tickets Ticket[]

   @@map("ticket_categories")
}

model Ticket {
   id                 BigInt         @id @default(autoincrement())
   ticket_category_id BigInt
   subject            String
   status             TicketStatus   @default(open)
   priority           TicketPriority @default(medium)
   created_by         BigInt
   created_at         DateTime       @default(now())
   updated_at         DateTime       @updatedAt

   // relations
   category      TicketCategory  @relation(fields: [ticket_category_id], references: [id], onDelete: Cascade)
   messages      TicketMessage[]
   Order         Order?          @relation(fields: [orderId], references: [id])
   orderId       BigInt?
   OrderContract OrderContract[]

   @@map("tickets")
}

model TicketMessage {
   id          BigInt   @id @default(autoincrement())
   ticket_id   BigInt
   sender_id   BigInt
   sender_type String // "admin" | "client"
   message     String
   created_at  DateTime @default(now())

   // relations
   ticket      Ticket       @relation(fields: [ticket_id], references: [id], onDelete: Cascade)
   attachments Attachment[]

   @@map("ticket_messages")
}

// ─────────────────────────────────────────────
//  CHAT
// ─────────────────────────────────────────────
model ChatRoom {
   id         BigInt   @id @default(autoincrement())
   title      String?
   is_active  Boolean  @default(true)
   created_at DateTime @default(now())
   updated_at DateTime @updatedAt

   // relations
   messages      ChatMessage[]
   OrderContract OrderContract[]

   @@map("chat_rooms")
}

model ChatMessage {
   id           BigInt   @id @default(autoincrement())
   chat_room_id BigInt
   sender_id    BigInt
   sender_type  String // "admin" | "client"
   message      String
   created_at   DateTime @default(now())

   // relations
   chatRoom    ChatRoom     @relation(fields: [chat_room_id], references: [id], onDelete: Cascade)
   attachments Attachment[]

   @@map("chat_messages")
}

// ─────────────────────────────────────────────
//  ATTACHMENTS
//    • one row may belong to either a ticket message
//      or a chat message (both FKs are nullable)
// ─────────────────────────────────────────────
model Attachment {
   id                BigInt   @id @default(autoincrement())
   ticket_message_id BigInt?
   chat_message_id   BigInt?
   uploader_id       BigInt
   uploader_type     String // "admin" | "client"
   file_name         String
   file_url          String
   mime_type         String
   file_size         Int
   created_at        DateTime @default(now())

   // relations (camelCase names)
   ticketMessage TicketMessage? @relation(fields: [ticket_message_id], references: [id], onDelete: Cascade)
   chatMessage   ChatMessage?   @relation(fields: [chat_message_id], references: [id], onDelete: Cascade)

   @@map("attachments")
}
